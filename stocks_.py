# -*- coding: utf-8 -*-
"""stocks .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fVQp7Nmv_XMwYHRNXtHFcEICAsC-WSna
"""

#installing dependencis 
import numpy as np
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt
plt.style.use('bmh')
!pip install pandas_datareader

#reading stock data from yahoo
end = dt.datetime.now()
#start = dt.datetime(end.year-2, end.month, end.day)
start = dt.datetime(2002, 5, 1)
df = web.DataReader("AAPL", 'yahoo', start, end)
df.to_csv('APPL.csv')
df.head(8)

# number of trading days 
df.shape
df.describe()

# visualize data 
plt.figure(figsize=(16,8))
plt.title('Apple')
plt.xlabel('Days')
plt.ylabel('Close price')
plt.plot(df['Close'])
plt.show()

#get the close price 
df= df[['Close']]
df.head(8)

# predict future 
ftr_days=30
#create a new column on the data 
df['predict']=df[['Close']].shift(-ftr_days)
df.tail(4)

# want to create a data set with prediction and remove last predicted rows
x=np.array(df.drop(['predict'],1))[:-ftr_days]
print(x)

#create target data set(y) and covert into numpy array and get all target values except x rows
y=np.array(df['predict'])[:-ftr_days]
print(y)

# split the data into 75% train and 25% test
x_train,x_test, y_train,y_test= train_test_split(x,y, test_size= 0.25)

# models 
#decison tree regressor model
tree= DecisionTreeRegressor().fit(x_train,y_train)
#create the regression meodel
lmodel=LinearRegression().fit(x_train,y_train)

# get the last rows of the feature data set
x_future= df.drop(['predict'],1)[:-ftr_days]
x_future=x_future.tail(ftr_days)
x_future=np.array(x_future)
x_future

# show model tree prediction
tree_prediction=tree.predict(x_future)
print(tree_prediction)

#show model liner regression prediction
Linear_predict=lmodel.predict(x_future)
print(Linear_predict)

#visualizing predicted data 
predictions= tree_prediction
valid=df[x.shape[0]:]
valid['predictions']= predictions 
plt.figure(figsize=(18,8))
plt.title('Model')
plt.xlabel('Days')
plt.ylabel('Close Price')
plt.plot(valid[['Close','predictions']])
plt.legend(['Orig','valid','predictions'])
plt.show()